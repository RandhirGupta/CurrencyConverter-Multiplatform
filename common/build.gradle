plugins {
    id("kotlin-multiplatform")
    id("kotlinx-serialization")
    id("org.jetbrains.kotlin.native.cocoapods")
    id("co.touchlab.kotlinxcodesync")
}

kotlin {

    targets {
        fromPreset(presets.jvm, 'android')

        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            binaries {
                framework('common') {
                    freeCompilerArgs.add("-Xobjc-generics")
                }
            }
        }
    }

    sourceSets {

        commonMain {

            dependencies {
                api CurrencyConverterConfig.Libs.Kotlin.kotlinStdlibCommon
                api CurrencyConverterConfig.Libs.KotlinX.kotlinxCoroutinesCoreCommon
                api CurrencyConverterConfig.Libs.KotlinX.kotlinxSerializationRuntimeCommon
                api CurrencyConverterConfig.Libs.Ktor.ktorClientCore
                api CurrencyConverterConfig.Libs.Ktor.ktorClientJson
                api CurrencyConverterConfig.Libs.Ktor.ktorClientLogging
                api CurrencyConverterConfig.Libs.Ktor.ktorClientSerialization
            }
        }

        androidMain {

            dependencies {
                api CurrencyConverterConfig.Libs.Kotlin.kotlinStdlib
                api CurrencyConverterConfig.Libs.KotlinX.kotlinxSerializationRuntime
                api CurrencyConverterConfig.Libs.Ktor.ktorClientJsonJvm
                api CurrencyConverterConfig.Libs.Ktor.ktorClientLoggingJvm
                api CurrencyConverterConfig.Libs.Ktor.ktorClientSerializationJvm
            }
        }

        iOSMain {
            dependencies {
                api CurrencyConverterConfig.Libs.KotlinX.kotlinxCoroutinesCoreNative
                api CurrencyConverterConfig.Libs.KotlinX.kotlinxSerializationRuntimeNative
                api CurrencyConverterConfig.Libs.Ktor.ktorClientIos
                api CurrencyConverterConfig.Libs.Ktor.ktorClientJsonNative
                api CurrencyConverterConfig.Libs.Ktor.ktorClientLoggingNative
                api CurrencyConverterConfig.Libs.Ktor.ktorClientSerializationNative
            }
        }

        all {
            languageSettings {
                progressiveMode = true
                useExperimentalAnnotation('kotlin.Experimental')
            }
        }
    }
}
configurations {
    compileClasspath
}

// Xcode-specific
task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.iOS.binaries.getFramework("Core", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode
